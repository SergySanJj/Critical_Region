<?xml version="1.0" encoding="UTF-8"?>
<project name="criticalregion" default="all">
  
  
  <property file="criticalregion.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.egg"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
    <include name="*.klib"/>
    <include name="*.swc"/>
    <include name="*.war"/>
    <include name="*.zip"/>
    <include name="*.ane"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.11" value="${jdk.home.11}/bin"/>
  <path id="jdk.classpath.11">
    <fileset dir="${jdk.home.11}">
      <include name="../jbr!/java.base"/>
      <include name="../jbr!/java.compiler"/>
      <include name="../jbr!/java.datatransfer"/>
      <include name="../jbr!/java.desktop"/>
      <include name="../jbr!/java.instrument"/>
      <include name="../jbr!/java.logging"/>
      <include name="../jbr!/java.management"/>
      <include name="../jbr!/java.management.rmi"/>
      <include name="../jbr!/java.naming"/>
      <include name="../jbr!/java.net.http"/>
      <include name="../jbr!/java.prefs"/>
      <include name="../jbr!/java.rmi"/>
      <include name="../jbr!/java.scripting"/>
      <include name="../jbr!/java.se"/>
      <include name="../jbr!/java.security.jgss"/>
      <include name="../jbr!/java.security.sasl"/>
      <include name="../jbr!/java.smartcardio"/>
      <include name="../jbr!/java.sql"/>
      <include name="../jbr!/java.sql.rowset"/>
      <include name="../jbr!/java.transaction.xa"/>
      <include name="../jbr!/java.xml"/>
      <include name="../jbr!/java.xml.crypto"/>
      <include name="../jbr!/javafx.base"/>
      <include name="../jbr!/javafx.controls"/>
      <include name="../jbr!/javafx.fxml"/>
      <include name="../jbr!/javafx.graphics"/>
      <include name="../jbr!/javafx.media"/>
      <include name="../jbr!/javafx.swing"/>
      <include name="../jbr!/javafx.web"/>
      <include name="../jbr!/jdk.accessibility"/>
      <include name="../jbr!/jdk.aot"/>
      <include name="../jbr!/jdk.attach"/>
      <include name="../jbr!/jdk.charsets"/>
      <include name="../jbr!/jdk.compiler"/>
      <include name="../jbr!/jdk.crypto.cryptoki"/>
      <include name="../jbr!/jdk.crypto.ec"/>
      <include name="../jbr!/jdk.dynalink"/>
      <include name="../jbr!/jdk.httpserver"/>
      <include name="../jbr!/jdk.internal.ed"/>
      <include name="../jbr!/jdk.internal.jvmstat"/>
      <include name="../jbr!/jdk.internal.le"/>
      <include name="../jbr!/jdk.internal.vm.ci"/>
      <include name="../jbr!/jdk.internal.vm.compiler"/>
      <include name="../jbr!/jdk.internal.vm.compiler.management"/>
      <include name="../jbr!/jdk.jdi"/>
      <include name="../jbr!/jdk.jdwp.agent"/>
      <include name="../jbr!/jdk.jfr"/>
      <include name="../jbr!/jdk.jsobject"/>
      <include name="../jbr!/jdk.localedata"/>
      <include name="../jbr!/jdk.management"/>
      <include name="../jbr!/jdk.management.agent"/>
      <include name="../jbr!/jdk.management.jfr"/>
      <include name="../jbr!/jdk.naming.dns"/>
      <include name="../jbr!/jdk.naming.rmi"/>
      <include name="../jbr!/jdk.net"/>
      <include name="../jbr!/jdk.pack"/>
      <include name="../jbr!/jdk.scripting.nashorn"/>
      <include name="../jbr!/jdk.scripting.nashorn.shell"/>
      <include name="../jbr!/jdk.sctp"/>
      <include name="../jbr!/jdk.security.auth"/>
      <include name="../jbr!/jdk.security.jgss"/>
      <include name="../jbr!/jdk.unsupported"/>
      <include name="../jbr!/jdk.xml.dom"/>
      <include name="../jbr!/jdk.zipfs"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.11}"/>
  <property name="project.jdk.bin" value="${jdk.bin.11}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.11"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.gradle:_junit:junit:4.12.classpath">
    <pathelement location="${basedir}/../../../Users/isara/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar"/>
  </path>
  
  <path id="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath">
    <pathelement location="${basedir}/../../../Users/isara/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar"/>
  </path>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <fileset dir="${javac2.home}">
      <include name="javac2.jar"/>
      <include name="jdom.jar"/>
      <include name="asm-all*.jar"/>
      <include name="forms-*.jar"/>
    </fileset>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module CriticalRegion -->
  
  <dirname property="module.criticalregion.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.criticalregion" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.criticalregion" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.criticalregion" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.criticalregion" value="-encoding UTF-8 -source 11 -target 11 ${compiler.args}"/>
  
  <property name="criticalregion.output.dir" value="${module.criticalregion.basedir}/out/production/CriticalRegion"/>
  <property name="criticalregion.testoutput.dir" value="${module.criticalregion.basedir}/out/test/CriticalRegion"/>
  
  <path id="criticalregion.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="criticalregion.module.production.classpath">
    <path refid="${module.jdk.classpath.criticalregion}"/>
  </path>
  
  <path id="criticalregion.runtime.production.module.classpath">
    <pathelement location="${criticalregion.output.dir}"/>
  </path>
  
  <path id="criticalregion.module.classpath">
    <path refid="${module.jdk.classpath.criticalregion}"/>
    <pathelement location="${criticalregion.output.dir}"/>
  </path>
  
  <path id="criticalregion.runtime.module.classpath">
    <pathelement location="${criticalregion.testoutput.dir}"/>
    <pathelement location="${criticalregion.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.criticalregion">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.criticalregion">
    <patternset refid="excluded.from.module.criticalregion"/>
  </patternset>
  
  
  <target name="compile.module.criticalregion" depends="compile.module.criticalregion.production,compile.module.criticalregion.tests" description="Compile module CriticalRegion"/>
  
  <target name="compile.module.criticalregion.production" depends="register.custom.compilers" description="Compile module CriticalRegion; production classes"/>
  
  <target name="compile.module.criticalregion.tests" depends="register.custom.compilers,compile.module.criticalregion.production" description="compile module CriticalRegion; test classes" unless="skip.tests"/>
  
  <target name="clean.module.criticalregion" description="cleanup module">
    <delete dir="${criticalregion.output.dir}"/>
    <delete dir="${criticalregion.testoutput.dir}"/>
  </target>
  
  
  <!-- Module CriticalRegion.main -->
  
  <dirname property="module.criticalregion.main.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.criticalregion.main" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.criticalregion.main" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.criticalregion.main" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.criticalregion.main" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="criticalregion.main.output.dir" value="${module.criticalregion.main.basedir}/build/classes/java/main"/>
  <property name="criticalregion.main.testoutput.dir" value="${module.criticalregion.main.basedir}/build/classes/java/main"/>
  
  <path id="criticalregion.main.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="criticalregion.main.module.production.classpath">
    <path refid="${module.jdk.classpath.criticalregion.main}"/>
  </path>
  
  <path id="criticalregion.main.runtime.production.module.classpath">
    <pathelement location="${criticalregion.main.output.dir}"/>
  </path>
  
  <path id="criticalregion.main.module.classpath">
    <path refid="${module.jdk.classpath.criticalregion.main}"/>
    <pathelement location="${criticalregion.main.output.dir}"/>
  </path>
  
  <path id="criticalregion.main.runtime.module.classpath">
    <pathelement location="${criticalregion.main.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.criticalregion.main">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.criticalregion.main">
    <patternset refid="excluded.from.module.criticalregion.main"/>
  </patternset>
  
  <path id="criticalregion.main.module.sourcepath">
    <dirset dir="${module.criticalregion.main.basedir}/src/main">
      <include name="java"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.criticalregion.main" depends="compile.module.criticalregion.main.production,compile.module.criticalregion.main.tests" description="Compile module CriticalRegion.main"/>
  
  <target name="compile.module.criticalregion.main.production" depends="register.custom.compilers" description="Compile module CriticalRegion.main; production classes">
    <mkdir dir="${criticalregion.main.output.dir}"/>
    <javac2 destdir="${criticalregion.main.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.criticalregion.main}/javac">
      <compilerarg line="${compiler.args.criticalregion.main}"/>
      <bootclasspath refid="criticalregion.main.module.bootclasspath"/>
      <classpath refid="criticalregion.main.module.production.classpath"/>
      <src refid="criticalregion.main.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.criticalregion.main"/>
    </javac2>
    
    <copy todir="${criticalregion.main.output.dir}">
      <fileset dir="${module.criticalregion.main.basedir}/src/main/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.criticalregion.main.tests" depends="register.custom.compilers,compile.module.criticalregion.main.production" description="compile module CriticalRegion.main; test classes" unless="skip.tests"/>
  
  <target name="clean.module.criticalregion.main" description="cleanup module">
    <delete dir="${criticalregion.main.output.dir}"/>
    <delete dir="${criticalregion.main.testoutput.dir}"/>
  </target>
  
  
  <!-- Module CriticalRegion.test -->
  
  <dirname property="module.criticalregion.test.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.criticalregion.test" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.criticalregion.test" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.criticalregion.test" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.criticalregion.test" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="criticalregion.test.output.dir" value="undefined"/>
  <property name="criticalregion.test.testoutput.dir" value="${module.criticalregion.test.basedir}/build/classes/java/test"/>
  
  <path id="criticalregion.test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="criticalregion.test.module.production.classpath">
    <path refid="${module.jdk.classpath.criticalregion.test}"/>
    <pathelement location="${criticalregion.main.output.dir}"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="criticalregion.test.runtime.production.module.classpath">
    <path refid="criticalregion.main.runtime.production.module.classpath"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="criticalregion.test.module.classpath">
    <path refid="${module.jdk.classpath.criticalregion.test}"/>
    <pathelement location="${criticalregion.main.output.dir}"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="criticalregion.test.runtime.module.classpath">
    <pathelement location="${criticalregion.test.testoutput.dir}"/>
    <path refid="criticalregion.main.runtime.module.classpath"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.criticalregion.test">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.criticalregion.test">
    <patternset refid="excluded.from.module.criticalregion.test"/>
  </patternset>
  
  <path id="criticalregion.test.module.test.sourcepath">
    <dirset dir="${module.criticalregion.test.basedir}/src/test">
      <include name="java"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.criticalregion.test" depends="compile.module.criticalregion.test.production,compile.module.criticalregion.test.tests" description="Compile module CriticalRegion.test"/>
  
  <target name="compile.module.criticalregion.test.production" depends="register.custom.compilers,compile.module.criticalregion.main" description="Compile module CriticalRegion.test; production classes"/>
  
  <target name="compile.module.criticalregion.test.tests" depends="register.custom.compilers,compile.module.criticalregion.test.production" description="compile module CriticalRegion.test; test classes" unless="skip.tests">
    <mkdir dir="${criticalregion.test.testoutput.dir}"/>
    <javac2 destdir="${criticalregion.test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.criticalregion.test}/javac">
      <compilerarg line="${compiler.args.criticalregion.test}"/>
      <bootclasspath refid="criticalregion.test.module.bootclasspath"/>
      <classpath refid="criticalregion.test.module.classpath"/>
      <src refid="criticalregion.test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.criticalregion.test"/>
    </javac2>
    
    <copy todir="${criticalregion.test.testoutput.dir}">
      <fileset dir="${module.criticalregion.test.basedir}/src/test/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.criticalregion.test" description="cleanup module">
    <delete dir="${criticalregion.test.output.dir}"/>
    <delete dir="${criticalregion.test.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.criticalregion, clean.module.criticalregion.main, clean.module.criticalregion.test" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.criticalregion, compile.module.criticalregion.main, compile.module.criticalregion.test" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>